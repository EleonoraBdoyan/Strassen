def pad_matrix(A, B):
    n = 2 ** (max(len(A), len(A[0]), len(B), len(B[0])) - 1).bit_length()
    padded_matrix_A = [[A[i][j] if i < len(A) and j < len(A[0]) else 0 for j in range(n)] for i in range(n)]
    padded_matrix_B = [[B[i][j] if i < len(B) and j < len(B[0]) else 0 for j in range(n)] for i in range(n)]
    return padded_matrix_A, padded_matrix_B


def split_matrix(matrix):
    n = len(matrix)
    mid = n // 2

    upper_left = [row[:mid] for row in matrix[:mid]]
    upper_right = [row[mid:] for row in matrix[:mid]]
    lower_left = [row[:mid] for row in matrix[mid:]]
    lower_right = [row[mid:] for row in matrix[mid:]]

    return upper_left, upper_right, lower_left, lower_right


def add_matrices(A, B):
    return [[A[i][j] + B[i][j] for j in range(len(A[0]))] for i in range(len(A))]


def subtract_matrices(A, B):
    return [[A[i][j] - B[i][j] for j in range(len(A[0]))] for i in range(len(A))]


def strassen_matrix_multiply(A, B):
    original_col = len(A)
    original_row = len(B[0])
    padded_matrices = pad_matrix(A, B)
    A = padded_matrices[0]
    B = padded_matrices[1]
    n = len(A)
    if n == 1:
        return [[A[0][0] * B[0][0]]]
    A11, A12, A21, A22 = split_matrix(A)
    B11, B12, B21, B22 = split_matrix(B)

    P1 = strassen_matrix_multiply(A11, subtract_matrices(B12, B22))
    P2 = strassen_matrix_multiply(add_matrices(A11, A12), B22)
    P3 = strassen_matrix_multiply(add_matrices(A21, A22), B11)
    P4 = strassen_matrix_multiply(A22, subtract_matrices(B21, B11))
    P5 = strassen_matrix_multiply(add_matrices(A11, A22), add_matrices(B11, B22))
    P6 = strassen_matrix_multiply(subtract_matrices(A12, A22), add_matrices(B21, B22))
    P7 = strassen_matrix_multiply(subtract_matrices(A11, A21), add_matrices(B11, B12))

    C11 = add_matrices(subtract_matrices(add_matrices(P5, P4), P2), P6)
    C12 = add_matrices(P1, P2)
    C21 = add_matrices(P3, P4)
    C22 = subtract_matrices(subtract_matrices(add_matrices(P5, P1), P3), P7)

    result = [[0] * n for _ in range(n)]
    for i in range(n // 2):
        for j in range(n // 2):
            result[i][j] = C11[i][j]
            result[i][j + n // 2] = C12[i][j]
            result[i + n // 2][j] = C21[i][j]
            result[i + n // 2][j + n // 2] = C22[i][j]
    original_result = [[result[i][j] for j in range(original_row)] for i in range(original_col)]
    return original_result


A = [[1, 2], [5, 6]]
B = [[1, 2], [5, 6]]


result = strassen_matrix_multiply(A, B)
for row in result:
    print(row)





